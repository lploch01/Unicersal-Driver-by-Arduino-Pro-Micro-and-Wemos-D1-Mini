#include <DS3231.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <SD.h>
#include <ESP8266WiFi.h>

WiFiServer server(80);

DS3231 rtc;

#define pin_CS D8

int key_pin = 0;
int key_pin2 = 2;
int key_pin3 = 16;

String ssid;
String password;
String myDate;
String header;
String output0State = "off";
String output1State = "off";
String output2State = "off";
String output3State = "off";
String output4State = "off";
String output5State = "off";
String output6State = "off";
String output7State = "off";

unsigned long currentTime = millis();
unsigned long previousTime = 0; 
const long timeoutTime = 1000;

int timeSetting = 0;
int Hour = 0;
int Minute = 0;
int Second = 0;

bool endSDCardDetectorProcess = false;
bool h12;
bool PM;


LiquidCrystal_I2C lcd(0x27, 16, 2);

File ssid_file, password_file;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Wire.begin();
  
  pinMode(key_pin, INPUT_PULLUP);
  pinMode(key_pin2, INPUT_PULLUP);
  pinMode(key_pin3, INPUT);
  pinMode(pin_CS, OUTPUT);
  
  SD.begin(pin_CS);


  lcd.begin();
  
  lcd.setCursor(0, 0);
  lcd.print("Universal Driver");
  lcd.setCursor(0, 1);
  lcd.print("by Lukasz Ploch");
  
  delay(3000);
  
  if(SDCardDetector());{
    lcd.clear();
    WiFiProtocolProcess();
  }

}

void loop() {
  // put your main code here, to run repeatedly:

  WifiServer();
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IP:");
  lcd.print(WiFi.localIP());
  
  Hour = rtc.getHour(h12, PM);
  Minute = rtc.getMinute();
  Second = rtc.getSecond();
  
  myDate = myDate + Hour +":" + Minute + ":" + Second;
  
  lcd.setCursor(0, 1);
  lcd.print("Time: ");
  lcd.print(myDate);
  
  myDate = "";
  
  delay(1000);

  if(IsButtonPress(key_pin3) && timeSetting <= 0){
    
  
    timeSetting = 1;
    TimeChange();
  }

}

bool SDCardDetector(){

  while(endSDCardDetectorProcess != true){
    
    if(!SD.begin(pin_CS)){
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Karta SD nie");
    lcd.setCursor(0, 1);
    lcd.print("zostala wykryta");
    delay(1000);

  }if(SD.begin(pin_CS)){
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Karta SD");
    lcd.setCursor(0, 1);
    lcd.print("zostala wykryta");
    delay(2000);
    
    while(endSDCardDetectorProcess != true && SD.begin(pin_CS)){
      
      if(SD.exists("ssid.txt") && SD.exists("password.txt")){

        ssid_file = SD.open("ssid.txt", FILE_READ);

        password_file = SD.open("password.txt", FILE_READ);

        if(ssid_file.available() && password_file.available() && SD.begin(pin_CS)){

          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Rozpoczeto");
          lcd.setCursor(0, 1);
          lcd.print("konfiguracje");
          delay(500);
          lcd.print(".");
          delay(500);
          lcd.print(".");
          delay(500);
          lcd.print(".");
          delay(500);
          lcd.clear();
          lcd.setCursor(0, 0);
          if(SD.begin(pin_CS)){

            ssid=ssid_file.readString();

            password=password_file.readString();
          }
          
          if(SD.begin(pin_CS)){

            password_file.close();
            ssid_file.close();
            
            endSDCardDetectorProcess = true;
            break;
          }
          
      
        }else{
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("brak wartosci");
          lcd.setCursor(0, 1);
          lcd.print("plikow config");
          delay(1000);        
        }
      
      
      }else{

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("tworzenie plikow conf");
        lcd.setCursor(0, 1);
        delay(500);
        lcd.print(".");
        lcd.setCursor(1, 1);
        delay(500);
        lcd.print(".");
        lcd.setCursor(2, 1);
        delay(500);
        lcd.print(".");
        delay(500);
      
        ssid_file = SD.open("ssid.txt", FILE_WRITE);
        ssid_file.close();
      
        password_file = SD.open("password.txt", FILE_WRITE);
        password_file.close();
      
      }
      
    }
    

    
    
    
  }
  }
  if(endSDCardDetectorProcess == true){
      lcd.print("Zakonczono");
      delay(1000);
    
      return true;
    }
  
  
}

bool IsButtonPress(int pinNumer){
  if(digitalRead(pinNumer) == LOW){

   delay(20);

   if(digitalRead(pinNumer) == LOW){
    delay(200);
    return true;
   }
   
  }
  return false;
}

void TimeChange(){
  
  int settHour = Hour;
  int settMinute = Minute;
  int settSecond = Second;
  
  String mySettTime;
  
  while(timeSetting > 0){

    if(IsButtonPress(key_pin2) && timeSetting == 1){
      settHour++;

      if(settHour >=24){
        settHour = 0;
      }
    }if(IsButtonPress(key_pin) && timeSetting == 1){
      settHour--;

      if(settHour < 0){
        settHour = 0;
      }
    }

    if(IsButtonPress(key_pin2) && timeSetting == 2){
      settMinute++;

      if(settMinute >= 60){
        settMinute = 0;
        settHour++;
      }
    }if(IsButtonPress(key_pin) && timeSetting == 2){
      settMinute--;

      if(settMinute <= 0){
        settMinute = 59;
        settHour--;
      }
    }

    if(IsButtonPress(key_pin2) && timeSetting == 3){
      settSecond++;

      if(settSecond >= 60){
        settSecond = 0;
        settMinute++;
      }
    }if(IsButtonPress(key_pin) && timeSetting ==3){
      settSecond--;

      if(settSecond <= 0){
        settSecond = 59;
        settMinute--;
      }
    }

    if(IsButtonPress(key_pin3)){
      timeSetting++;
    }

    if(timeSetting == 4){
      timeSetting = 0;
      break;
    }

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(timeSetting);
    mySettTime = mySettTime + settHour + ":" + settMinute + ":" + settSecond;
    lcd.setCursor(0, 1);
    lcd.print(mySettTime);
    mySettTime = "";
    delay(100);
    
  }

  Hour = settHour;
  Minute = settMinute;
  Second = settSecond;

  rtc.setHour(Hour);
  rtc.setMinute(Minute);
  rtc.setSecond(Second);


}

void WiFiProtocolProcess(){
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Laczenie z:");
  lcd.setCursor(0, 1);
  lcd.print(ssid);
  WiFi.begin(ssid, password);

  while(WiFi.status() != WL_CONNECTED){
  
    delay(500);
    lcd.print(".");
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Polaczono z:");
  lcd.setCursor(0, 1);
  lcd.print(ssid);
  delay(2000);
  server.begin();
}

void WifiServer(){
  WiFiClient client = server.available();
  
  if(client){
    String currentLine = "";
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime){
      currentTime = millis();
      if(client.available()){
        char c = client.read();
        header += c;
        if(c == '\n'){
          if(currentLine.length() == 0){


            if(header.indexOf("GET /0/on") >= 0){
              
              Serial.write("a");

              output0State = "on";
            }else if(header.indexOf("GET /0/off") >= 0){
              
              Serial.write("b");
              
              output0State = "off";
            }else if(header.indexOf("GET /1/on") >= 0){

              Serial.write("c");

              output1State = "on";
            }else if(header.indexOf("GET /1/off") >= 0){

              Serial.write("d");

              output1State = "off";
            }else if(header.indexOf("GET /2/on") >= 0){

              Serial.write("e");

              output2State = "on";
            }else if(header.indexOf("GET /2/off") >= 0){

              Serial.write("f");

              output2State = "off";
            }else if(header.indexOf("GET /3/on") >= 0){

              Serial.write("g");

              output3State = "on";
            }else if(header.indexOf("GET /3/off") >= 0){

              Serial.write("h");

              output3State = "off";
            }else if(header.indexOf("GET /4/on") >= 0){

              Serial.write("i");

              output4State = "on";
            }else if(header.indexOf("GET /4/off") >= 0){

              Serial.write("j");
              
              output4State = "off";
            }else if(header.indexOf("GET /5/on") >=0){

              Serial.write("k");

              output5State = "on";
            }else if(header.indexOf("GET /5/off") >= 0){

              Serial.write("l");

              output5State = "off";
            }else if(header.indexOf("GET /6/on") >= 0){

              Serial.write("m");

              output6State = "on";
            }else if(header.indexOf("GET /6/off") >= 0){

              Serial.write("n");

              output6State = "off";
            }else if(header.indexOf("GET /7/on") >= 0){

              Serial.write("o");

              output7State = "on";
            }else if(header.indexOf("GET /7/off") >= 0){

              Serial.write("p");

              output7State = "off";
            }

            client.println("<!COCTYPE html><html>");
            client.println("<head><meta name=\"viewport\"content=\"width=device-width, inital-scale=1\">");
            client.println("<link rel=\"icon\"hred=\"data:,\">");


            client.println("<style>html {font-family: Helverica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #77878A;}</style></head>");

            client.println("<body><h1>Universal Driver Relay Control Panel</h1>");

            client.println("<p>RELAY 0 - State " + output0State + "</p>");

            if(output0State == "off"){
              client.println("<p><a href=\"/0/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href =\"/0/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 1 - State " + output1State + "</p>");

            if(output1State=="off"){
              client.println("<p><a href=\"/1/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/1/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 2 - State " + output2State + "</p>");

            if(output2State=="off"){
              client.println("<p><a href=\"/2/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/2/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 3 - State " + output3State + "</p>");

            if(output3State=="off"){
              client.println("<p><a href=\"/3/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/3/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 4 - State " + output4State + "</p>");

            if(output4State=="off"){
              client.println("<p><a href=\"/4/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/4/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 5 - State " + output5State + "</p>");

            if(output5State=="off"){
              client.println("<p><a href=\"/5/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/5/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 6 - State " + output6State + "</p>");

            if(output6State=="off"){
              client.println("<p><a href=\"/6/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/6/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>RELAY 7 - State " + output7State + "</p>");

            if(output7State=="off"){
              client.println("<p><a href=\"/7/on\"><button class=\"button\">ON</button></a></p>");
            }else{
              client.println("<p><a href=\"/7/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("</body></html>");

            client.println();

            break;
          }else{
            currentLine = "";
          }
        }else if(c != '\r'){
          currentLine += c;
        }
      }
    }
    header = "";

    client.stop();
  }
}
      
    
